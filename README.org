* Table of Contents                                                     :TOC:
- [[#show-dont-tell][Show, don't tell]]
- [[#about-bind][About =bind=]]
  - [[#metadata][Metadata]]
  - [[#bind-prefix][=bind-prefix=]]
  - [[#bind-repeat][=bind-repeat=]]
  - [[#bind-autoload][=bind-autoload=]]
  - [[#alias-bind-undo-to-unbind][Alias =bind-undo= to =unbind=]]
  - [[#enhancing-bind][Enhancing =bind=]]
- [[#comparison][Comparison]]
- [[#package-configurator-support][Package Configurator Support]]
  - [[#setupel][setup.el]]
  - [[#use-package][use-package]]

* Show, don't tell

You have =define-key= function in Emacs, which binds a command to a key sequence in a map.

#+begin_src elisp
 (define-key my-window-map "d" #'delete-window)
#+end_src

This is how you do it with =bind=.

#+begin_src elisp
 (bind my-window-map "d" #'delete-window)
#+end_src

Hey, but first I have to define =my-window-map=.

#+begin_src elisp
 (bind (setq my-window-map (make-sparse-keymap)) "d" #'delete-window)
#+end_src

If you want to bind many commands to keys,

#+begin_src elisp
  (bind my-window-map
        "h" #'windmove-left
        "j" #'windmove-down
        "k" #'windmove-up
        "l" #'windmove-right)
#+end_src

If you want to bind those bindings in multiple maps,

#+begin_src elisp
  (bind (my-window-map my-other-window-map)
        "h" #'windmove-left
        "j" #'windmove-down
        "k" #'windmove-up
        "l" #'windmove-right)
#+end_src

I will be using those keymaps in multiple places.

#+begin_src elisp
  (defun my-window-keymaps ()
    (list my-window-map my-other-window-map))

  (bind (my-window-keymaps)
        "h" #'windmove-left
        "j" #'windmove-down
        "k" #'windmove-up
        "l" #'windmove-right)
#+end_src

I want to bind =my-open-map= I previously have.

#+begin_src elisp
  (bind my-window-map
        "h" #'windmove-left
        "j" #'windmove-down
        "k" #'windmove-up
        "l" #'windmove-right
        "o" my-open-map)
#+end_src

Jeez, I forgot that I was going to do it in =my-leader-map=.

#+begin_src elisp
    (bind (my-window-map
           "h" #'windmove-left
           "j" #'windmove-down
           "k" #'windmove-up
           "l" #'windmove-right
           "d" #'delete-window)
          (my-leader-map
           "o" my-open-map))
#+end_src

I want to prefix each window command with ~w~ key.

#+begin_src elisp
  (bind my-window-map
        (bind-prefix "w"
          "h" #'windmove-left
          "j" #'windmove-down
          "k" #'windmove-up
          "l" #'windmove-right))
#+end_src

Never mind, I will just bind =my-window-map= to ~w~ in =my-leader-map=.

#+begin_src elisp
  (bind (my-window-map
         "h" #'windmove-left
         "j" #'windmove-down
         "k" #'windmove-up
         "l" #'windmove-right)
        (my-leader-map
         "o" my-open-map
         "w" my-window-map))
#+end_src

Shoot, something went wrong let me undo changes.

#+begin_src elisp
  (bind-undo (my-window-map
              "h" #'windmove-left
              "j" #'windmove-down
              "k" #'windmove-up
              "l" #'windmove-right)
             (my-leader-map
              "o" my-open-map
              "w" my-window-map))
#+end_src

I just want to unbind keys.

#+begin_src elisp
  (bind-undo my-window-map "h" "j" "k" "l")
#+end_src

Hey, I want to make use of =repeat-mode=, when enabled, for my window keys.

#+begin_src elisp
  (bind my-window-map
        (bind-repeat
          "h" #'windmove-left
          "j" #'windmove-down
          "k" #'windmove-up
          "l" #'windmove-right))
#+end_src

Let's bind some keys for [[https://github.com/minad/vertico][vertico]] package.

#+begin_src elisp
(bind vertico-map
	"M-j" #'vertico-next
	"M-k" #'vertico-previous
	"M-J" #'vertico-next-group
	"M-K" #'vertico-previous-group
	"M->" #'vertico-scroll-up
	"M-<" #'vertico-scroll-down
	"C->" #'vertico-last
	"C-<" #'vertico-first)
#+end_src

Hmm, can I prefix those with a modifier key?

#+begin_src elisp
  (bind vertico-map
        (bind-prefix "M-"
          "j" #'vertico-next
          "k" #'vertico-previous
          "J" #'vertico-next-group
          "K" #'vertico-previous-group
          ">" #'vertico-scroll-up
          "<" #'vertico-scroll-down)
        (bind-prefix "C-"
          ">" #'vertico-last
          "<" #'vertico-first))
#+end_src
     
Good! Let's autoload [[https://github.com/minad/vertico][vertico]] when a command is called in =my-leader-map= that is not yet loaded (and not autoloaded by package).

#+begin_src elisp
  (bind my-leader-map
        (bind-autoload :vertico
          "r" #'vertico-repeat))
#+end_src

I've gone mad. I want to put window movement commands under key ~m~ and layout commands under ~l~.

#+begin_src elisp
  (bind my-window-map
        (bind-prefix "m"
          "h" #'windmove-left
          "j" #'windmove-down
          "k" #'windmove-up
          "l" #'windmove-right)
        "d" #'delete-window
        "D" #'delete-other-windows
        (bind-prefix "l"
          "b" #'split-window-below
          "r" #'split-window-right))
#+end_src

Hmm, it would be good if I could also repeat them and just autoload layout commands.

#+begin_src elisp
  (bind my-window-map
        (bind-repeat
          (bind-prefix "m"
            "h" #'windmove-left
            "j" #'windmove-down
            "k" #'windmove-up
            "l" #'windmove-right)
          "d" #'delete-window
          "D" #'delete-other-windows
          (bind-autoload :my-package
              (bind-prefix "l"
                "b" #'split-window-below
                "r" #'split-window-right))))
#+end_src

Let's bind =my-leader-map= to global map at the end.

#+begin_src elisp
  (bind (my-window-map
         (bind-repeat
           (bind-prefix "m"
             "h" #'windmove-left
             "j" #'windmove-down
             "k" #'windmove-up
             "l" #'windmove-right)
           "d" #'delete-window
           "D" #'delete-other-windows
           (bind-autoload :my-package
             (bind-prefix "l"
               "b" #'split-window-below
               "r" #'split-window-right))))
        (my-leader-map
         "o" my-open-map
         "w" my-window-map)
        (global-map
         "SPC" my-leader-map))
#+end_src

I want to bind a command in =c-mode= locally.

#+begin_src elisp
  (add-hook 'c-mode-hook
            (lambda ()
              (bind (bind-local-map)
                    "k" #'my-command)))
#+end_src

Hmm, =(bind-local)= is a function and seems to be returning a keymap just like how =local-set-key= does. Is there a global counterpart, just to complement each other?

#+begin_src elisp
  (bind (bind-global-map) "SPC" my-leader-map)
#+end_src

Can I still remap a command just like in =define-key=?

#+begin_src elisp
  (bind help-map [remap define-function] #'my-define-function)
#+end_src

* About =bind=

Syntax is =(bind FORM)= or =(bind (FORM)...)= so =(FORM)= is
repeatable.

=FORM='s first element can be a keymap, list of keymaps, a function
returning keymap (=setq=) or keymaps (a user function).  It is
quoted, if it is a keymap or a list of keymaps.

=FORM='s rest elements must be bindings.  A binding is in the form
of =KEY DEF= where =KEY= and =DEF= has the same specs as in
=define-key=, in the case of =bind=.

Here are some gists about =bind=.

- Every key binding in Emacs lives in a key map. Instead of providing different functions for specific cases, =bind= suggests one function.
- It is a macro yet it also wants to act like a function such that its arguments are mostly evaluated.
- Putting multiple =bind= forms in one =bind= call is same as calling each one on its own.
- There are processing functions like =bind-prefix=, =bind-autoload= etc. which takes bindings and acts on them and returns bindings, possibly modified. Those can be nested as however wanted. =bind= carries information, metadata, at upper levels to lower levels and then processing function propagates backwards.

** Metadata

=bind--metadata= is a lexical plist that carries information populated by upper bind calls to use from lower bind calls (nesting wise) so that information isn't repeated.

=bind= only provides =bind-main= prop by resolving the main keymap by default.

Following is the logic for resolving bind main, in order,

=BIND-FIRST= is the first element of bind =FORM=.

1. If =BIND-FIRST= is a keymap then =BIND-FIRST=
2. If =BIND-FIRST= a function call then
   1. If =BIND-FIRST= is a call to ='bind-safe= function (a symbol that has ='bind-safe= prop), then first of it is output
   2. Otherwise first argument to function call (like to =setq=).
3. Otherwise first element of =BIND-FIRST=.


Only put 'bind-safe to a function if function doesn't mutate data.

See =bind-autoload= for a use case.

** =bind-prefix=

Simplest processing function, prefixes each key with given prefix. Understands modifier prefixes.

** =bind-repeat=

Support for =repeat-mode=. Puts =repeat-map= property to definitions in bindings for bind =:main= property in metadata. Make sure =repeat-mode= is enabled.

** =bind-autoload=

Autoload definitions in bindings. If first argument to function is a symbol, then autoload that feature. Otherwise try to retrieve =:main-file= prop from metadata.

=bind= doesn't provide that prop but package configurators usually have that info which they can provide it in their =bind= support.

** Alias =bind-undo= to =unbind=

=unbind= sounds nice with =bind= instead of =bind-undo=. It is not called that way because package conventions but no one is limiting you.

** Enhancing =bind=

*** =bind--definer=

At the end of everything, =bind--definer= is called with =KEYMAP=, =KEY= and =DEF= (arguments to =define-key=). You can lexically change that variable and call =bind= in your own function for custom behaviors.

*** Processor functions

All a processor function must do is taking bindings and returning them, possibly modified. While doing so it can provide other utilities through bindings.

User can easily define a processing function.  User is encouraged to make use of =bind-keyp=, =bind-foreach-key-def=, =bind-flatten1-key-of-bindings= and =bind-with-metadata= utility functions for their custom behavior.  See default processing functions' definitions for examples.

=bind-flatten1-key-of-bindings= is especially useful because processing functions shouldn't assume bindings will be in =(KEY DEF)+= but =((KEY DEF)|((KEY DEF)+))+= form due to inner processing functions returning bindings in a list.

See a processing function I use [[https://github.com/repelliuss/bind/wiki#prefix-keys-with-user-mode-local-key-sequence][here]].

* TODO Comparison
* TODO Package Configurator Support
** setup.el

** use-package


